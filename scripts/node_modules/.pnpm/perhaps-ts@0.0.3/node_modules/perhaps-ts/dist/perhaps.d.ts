/**
 * Creates a Maybe instance representing Just with a given value.
 * @param value - The value to be contained in the Maybe instance.
 * @returns {Maybe<T>} A Maybe instance with the provided value.
 */
export declare const Just: typeof Maybe.Just;

export declare type Just<T> = Maybe<T>;

/**
 * A class representing an optional value (Maybe type).
 * Can either be a Just (having a value) or a Nothing (no value).
 */
export declare class Maybe<T> {
    private hasValue;
    private value?;
    /**
     * Constructs a Maybe instance.
     * @param hasValue - Indicates whether the instance has a value.
     * @param value - The value contained in the Maybe instance (if any).
     */
    private constructor();
    /**
     * Checks if the Maybe instance is Nothing (has no value).
     * @returns {boolean} True if the instance is Nothing, otherwise false.
     */
    IsNothing(): boolean;
    /**
     * Checks if the Maybe instance is Just (has a value).
     * @returns {boolean} True if the instance is Just, otherwise false.
     */
    IsJust(): boolean;
    /**
     * Creates a Maybe instance representing Nothing.
     * @returns {Maybe<T>} A Maybe instance with no value.
     */
    static Nothing<T>(): Maybe<T>;
    /**
     * Creates a Maybe instance representing Just with a given value.
     * @param value - The value to be contained in the Maybe instance.
     * @returns {Maybe<T>} A Maybe instance with the provided value.
     */
    static Just<T>(value: T): Maybe<T>;
    /**
     * Retrieves the value of a Just instance or throws an error if it's Nothing.
     * Alias for FromJust method.
     * @returns {T} The value contained in the Just instance.
     * @throws {Error} If the instance is Nothing.
     */
    ToChecked(): T;
    /**
     * Checks if the Maybe instance is Nothing and throws an error if it is.
     * @throws {Error} If the instance is Nothing.
     */
    Check(): void;
    /**
     * Retrieves the value of a Just instance and sets it in the provided output object.
     * @param out - An object to hold the value if the instance is Just.
     * @returns {boolean} True if the instance is Just, otherwise false.
     */
    To(out: Maybe<T>): boolean;
    /**
     * Retrieves the value of a Just instance or throws an error if it's Nothing.
     * @returns {T} The value contained in the Just instance.
     * @throws {Error} If the instance is Nothing.
     */
    FromJust(): T;
    /**
     * Retrieves the value of a Just instance or returns a default value if it's Nothing.
     * @param defaultValue - The default value to return if the instance is Nothing.
     * @returns {T} The value of the instance if it's Just, otherwise the default value.
     */
    FromMaybe(defaultValue: T): T;
    /**
     * Compares two Maybe instances for equality.
     * @param other - Another Maybe instance to compare with.
     * @returns {boolean} True if both instances are equal, otherwise false.
     */
    equals(other: Maybe<T>): boolean;
    /**
     * Compares two Maybe instances for inequality.
     * @param other - Another Maybe instance to compare with.
     * @returns {boolean} True if both instances are not equal, otherwise false.
     */
    notEquals(other: Maybe<T>): boolean;
}

/**
 * Creates a Maybe instance representing Nothing.
 * @returns {Maybe<T>} A Maybe instance with no value.
 */
export declare const Nothing: typeof Maybe.Nothing;

export declare type Nothing = Maybe<never>;

export { }
