const u = {
  /**
   * Throws an error indicating an attempt to access the value of a Nothing instance.
   * @throws {Error} Throws an error with a specific message.
   */
  FromJustIsNothing() {
    throw new Error("Maybe: Attempted to access value of Nothing");
  }
};
class s {
  /**
   * Constructs a Maybe instance.
   * @param hasValue - Indicates whether the instance has a value.
   * @param value - The value contained in the Maybe instance (if any).
   */
  constructor(t, e) {
    this.hasValue = t, this.value = e;
  }
  /**
   * Checks if the Maybe instance is Nothing (has no value).
   * @returns {boolean} True if the instance is Nothing, otherwise false.
   */
  IsNothing() {
    return !this.hasValue;
  }
  /**
   * Checks if the Maybe instance is Just (has a value).
   * @returns {boolean} True if the instance is Just, otherwise false.
   */
  IsJust() {
    return this.hasValue;
  }
  /**
   * Creates a Maybe instance representing Nothing.
   * @returns {Maybe<T>} A Maybe instance with no value.
   */
  static Nothing() {
    return new s(!1);
  }
  /**
   * Creates a Maybe instance representing Just with a given value.
   * @param value - The value to be contained in the Maybe instance.
   * @returns {Maybe<T>} A Maybe instance with the provided value.
   */
  static Just(t) {
    return new s(!0, t);
  }
  /**
   * Retrieves the value of a Just instance or throws an error if it's Nothing.
   * Alias for FromJust method.
   * @returns {T} The value contained in the Just instance.
   * @throws {Error} If the instance is Nothing.
   */
  ToChecked() {
    return this.FromJust();
  }
  /**
   * Checks if the Maybe instance is Nothing and throws an error if it is.
   * @throws {Error} If the instance is Nothing.
   */
  Check() {
    this.IsNothing() && u.FromJustIsNothing();
  }
  /**
   * Retrieves the value of a Just instance and sets it in the provided output object.
   * @param out - An object to hold the value if the instance is Just.
   * @returns {boolean} True if the instance is Just, otherwise false.
   */
  To(t) {
    return this.IsJust() ? (t.value = this.value, t.hasValue = !0, !0) : !1;
  }
  /**
   * Retrieves the value of a Just instance or throws an error if it's Nothing.
   * @returns {T} The value contained in the Just instance.
   * @throws {Error} If the instance is Nothing.
   */
  FromJust() {
    return this.IsNothing() && u.FromJustIsNothing(), this.value;
  }
  /**
   * Retrieves the value of a Just instance or returns a default value if it's Nothing.
   * @param defaultValue - The default value to return if the instance is Nothing.
   * @returns {T} The value of the instance if it's Just, otherwise the default value.
   */
  FromMaybe(t) {
    return this.hasValue ? this.value : t;
  }
  /**
   * Compares two Maybe instances for equality.
   * @param other - Another Maybe instance to compare with.
   * @returns {boolean} True if both instances are equal, otherwise false.
   */
  equals(t) {
    return this.IsJust() === t.IsJust() && (!this.IsJust() || this.FromJust() === t.FromJust());
  }
  /**
   * Compares two Maybe instances for inequality.
   * @param other - Another Maybe instance to compare with.
   * @returns {boolean} True if both instances are not equal, otherwise false.
   */
  notEquals(t) {
    return !this.equals(t);
  }
}
const r = s.Nothing, h = s.Just;
export {
  h as Just,
  s as Maybe,
  r as Nothing
};
